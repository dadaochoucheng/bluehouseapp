<?php

namespace Bluehouseapp\Bundle\CoreBundle\Entity;

use Bluehouseapp\Bundle\CoreBundle\Doctrine\ORM\EntityRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostCommentRepository extends EntityRepository
{

    public  function  getCommentsByPost($post){
        $queryBuilder = parent::getQueryBuilder()
            ->innerJoin('pc.member', 'm')
            ->innerJoin('pc.post', 'p')
            ->where('pc.post = :post')
            ->andWhere('pc.status = :status')
            ->andWhere('pc.enabled = :enabled')
            ->andWhere('p.status = :status')
            ->andWhere('p.enabled = :enabled')
            ->andWhere('m.locked = :mLocked')
            ->setParameters(array(':post' => $post,
                'status' => true, 'enabled' => true,
                'mLocked'=>false
            ))
            ->orderBy('pc.modified', 'asc');
        return parent::getPaginator($queryBuilder);

    }





    public function getLastComment($post)
    {

        $query = parent::getQueryBuilder()
            ->innerJoin('pc.member', 'm')
            ->where('pc.post = :post')
            ->andWhere('m.locked = :mLocked')
            ->andWhere('pc.status = :pcStatus')
            ->andWhere('pc.enabled = :pcEnabled')
            ->setParameters(array(':post'=>$post->getId(),
                'mLocked'=>false,
                'pcStatus' => true, 'pcEnabled' => true,
            ))
            ->orderBy('pc.id','desc')
            ->setMaxResults(1)
            ->setFirstResult(0)
            ->getQuery();
        try {
            $comment = $query->getSingleResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
            $comment = null;
        }
        return $comment;
    }




    public function  getPostCommentsByMember($member){

        $queryBuilder = parent::getQueryBuilder()
            ->innerJoin('pc.member', 'm')
            ->innerJoin('pc.post', 'p')
            ->innerJoin('p.node', 'n')
            ->innerJoin('n.category', 'c')
            ->where('pc.member = :member')
            ->andWhere('pc.status = :status')
            ->andWhere('pc.enabled = :enabled')
            ->andWhere('p.status = :status')
            ->andWhere('p.enabled = :enabled')
            ->andWhere('n.status = :status')
            ->andWhere('n.enabled = :enabled')
            ->andWhere('c.status = :status')
            ->andWhere('c.enabled = :enabled')
            ->andWhere('m.locked = :mLocked')
            ->setParameters(array(':member' => $member,
                'status' => true, 'enabled' => true,
                'mLocked'=>false
            ))
            ->orderBy('pc.modified', 'desc');
        return parent::getPaginator($queryBuilder);

    }
    protected function getAlias()
    {
        return 'pc';
    }
}
